import calendar
from datetime import datetime

import discord
from discord import SlashCommandOptionType

import lib.errors
from lib import Player
from lib.utilities import rank_to_colour


class Core(discord.Cog):
    def __init__(self, bot):
        self.bot = bot

    @discord.slash_command(
        name='player',
        description="Check player statistics by Nickname / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ù–∏–∫–Ω–µ–π–º—É"
    )
    async def player_command(
            self,
            ctx: discord.ApplicationContext,
            nickname: discord.Option(
                str, name='nick',
                description="Player Nickname / –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞"
            ),
            game_type: discord.Option(
                str, name='gamemode',
                description="Game mode to check stats from / –ò–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                choices=["RB", "AB", "SB"]
            ) = "AB"
    ):
        try:
            info = await Player.from_nickname(nickname=nickname)
        except lib.errors.FailedToGetStats:
            return await ctx.respond(
                content=f"**:x: –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω!**",
                ephemeral=True
            )

        match game_type:
            case "AB":
                data = info.arcade
            case "RB":
                data = info.realistic
            case "SB":
                data = info.simulator
            case _:
                data = info.arcade

        embed = discord.Embed(
            title=f"{info.nickname} - {info.rank}",
            colour=rank_to_colour(info.rank),
            timestamp=discord.utils.utcnow()
        )
        embed.description = f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ **{game_type}**.\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <t:{calendar.timegm(datetime.timetuple(info.last_update))}:R>"

        embed.add_field(name="üïó –ö–ü–î", value=f"{data.get('kpd')}", inline=False)
        embed.add_field(
            name='‚öîÔ∏è W/Overall | –í–∏–Ω—Ä–µ–π—Ç%',
            value=f"{data.get('win')}/{data.get('mission')} **|** `{data.get('winrate')}%`"
        )

        embed.add_field(
            name='üíÄ KD | KB',
            value=f"{data.get('kd')} **|** {data.get('kb')} "
        )

        embed.add_field(
            name='„Ö§', inline=False,
            value=f"[–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ ThunderSkill](https://thunderskill.com/en/stat/{nickname})"
        )

        embed.set_footer(text='by gigalegit-#0880')

        await ctx.respond(embed=embed)


def setup(bot: discord.Bot):
    bot.add_cog(Core(bot=bot))
